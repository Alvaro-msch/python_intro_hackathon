{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"text",
				"text_size_change"
			],
			[
				"get",
				"getElementById"
			],
			[
				"butt",
				"button_text_to_change"
			],
			[
				"button",
				"button1"
			],
			[
				"m",
				"myImage"
			],
			[
				"on",
				"onclick	Attr"
			],
			[
				"name",
				"name"
			],
			[
				"format",
				"formattedRole"
			],
			[
				"formatted",
				"formattedName"
			],
			[
				"fun",
				"funThoughts"
			],
			[
				"For",
				"ForeignKey"
			],
			[
				"resta",
				"restaurant"
			],
			[
				"nu",
				"nullable"
			],
			[
				"cre",
				"create_engine"
			],
			[
				"dec",
				"declarative_base"
			]
		]
	},
	"buffers":
	[
		{
			"file": "chapter2.md",
			"settings":
			{
				"buffer_size": 7648,
				"line_ending": "Windows"
			}
		},
		{
			"file": "chapter7.md",
			"settings":
			{
				"buffer_size": 7562,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "---\ntitle       : Tips and Tricks from the best hackers!\ndescription : Here is the best part of a hackathon - you learn from the best hackers as you compete against them. This chapter just brings out some tips and tricks as shared by the best hackers.\nattachments :\n  slides_link : https://s3.amazonaws.com/assets.datacamp.com/course/teach/slides_example.pdf\n\n--- type:VideoExercise lang:python xp:50 skills:1 key:c55198c91d\n## Analyze movie ratings\n\n*** =video_link\n//player.vimeo.com/video/154783078\n\n--- type:MultipleChoiceExercise lang:python xp:50 skills:1 key:9a8fd577a9\n## A really bad movie\n\nHave a look at the plot that showed up in the viewer to the right. Which type of movies have the worst rating assigned to them?\n\n*** =instructions\n- Long movies, clearly\n- Short movies, clearly\n- Long movies, but the correlation seems weak\n- Short movies, but the correlation seems weak\n\n*** =hint\nHave a look at the plot. Do you see a trend in the dots?\n\n*** =pre_exercise_code\n```{r}\n# The pre exercise code runs code to initialize the user's workspace. You can use it for several things:\n\n# 1. Pre-load packages, so that users don't have to do this manually.\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 2. Preload a dataset. The code below will read the csv that is stored at the URL's location.\n# The movies variable will be available in the user's console.\nmovies = pd.read_csv(\"http://s3.amazonaws.com/assets.datacamp.com/course/introduction_to_r/movies.csv\")\n\n# 3. Create a plot in the viewer, that students can check out while reading the exercise\nplt.scatter(movies.runtime, movies.rating)\nplt.show()\n```\n\n*** =sct\n```{r}\n# The sct section defines the Submission Correctness Tests (SCTs) used to\n# evaluate the student's response. All functions used here are defined in the \n# pythonwhat Python package\n\nmsg_bad = \"That is not correct!\"\nmsg_success = \"Exactly! The correlation is very weak though.\"\n\n# Use test_mc() to grade multiple choice exercises. \n# Pass the correct option (Action, option 2 in the instructions) to correct.\n# Pass the feedback messages, both positive and negative, to feedback_msgs in the appropriate order.\ntest_mc(4, [msg_bad, msg_bad, msg_bad, msg_success]) \n```\n\n--- type:MultipleChoiceExercise lang:python xp:50 skills:1 key:f0e6a8e8a5\n## A really bad movie\n\nHave a look at the plot that showed up in the viewer to the right. Which type of movies have the worst rating assigned to them?\n\n*** =instructions\n- Long movies, clearly\n- Short movies, clearly\n- Long movies, but the correlation seems weak\n- Short movies, but the correlation seems weak\n\n*** =hint\nHave a look at the plot. Do you see a trend in the dots?\n\n*** =pre_exercise_code\n```{python}\n# The pre exercise code runs code to initialize the user's workspace. You can use it for several things:\n\n# 1. Pre-load packages, so that users don't have to do this manually.\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 2. Preload a dataset. The code below will read the csv that is stored at the URL's location.\n# The movies variable will be available in the user's console.\nmovies = pd.read_csv(\"http://s3.amazonaws.com/assets.datacamp.com/course/introduction_to_r/movies.csv\")\n\n# 3. Create a plot in the viewer, that students can check out while reading the exercise\nplt.scatter(movies.runtime, movies.rating)\nplt.show()\n```\n\n*** =sct\n```{python}\n# The sct section defines the Submission Correctness Tests (SCTs) used to\n# evaluate the student's response. All functions used here are defined in the\n# pythonwhat Python package\n\nmsg_bad = \"That is not correct!\"\nmsg_success = \"Exactly! The correlation is very weak though.\"\n\n# Use test_mc() to grade multiple choice exercises.\n# Pass the correct option (option 4 in the instructions) to correct.\n# Pass the feedback messages, both positive and negative, to feedback_msgs in the appropriate order.\ntest_mc(4, [msg_bad, msg_bad, msg_bad, msg_success])\n```\n\n--- type:NormalExercise lang:python xp:100 skills:1 key:af2f6f90f3\n## Plot the movies yourself\n\nDo you remember the plot of the last exercise? Let's make an even cooler plot!\n\nA dataset of movies, `movies`, is available in the workspace.\n\n*** =instructions\n- The first function, `np.unique()`, uses the `unique()` function of the `numpy` package to get integer values for the movie genres. You don't have to change this code, just have a look!\n- Import `pyplot` in the `matplotlib` package. Set an alias for this import: `plt`.\n- Use `plt.scatter()` to plot `movies.runtime` onto the x-axis, `movies.rating` onto the y-axis and use `ints` for the color of the dots. You should use the first and second positional argument, and the `c` keyword.\n- Show the plot using `plt.show()`.\n\n*** =hint\n- You don't have to program anything for the first instruction, just take a look at the first line of code.\n- Use `import ___ as ___` to import `matplotlib.pyplot` as `plt`.\n- Use `plt.scatter(___, ___, c = ___)` for the third instruction.\n- You'll always have to type in `plt.show()` to show the plot you created.\n\n*** =pre_exercise_code\n```{python}\n# The pre exercise code runs code to initialize the user's workspace. You can use it for several things:\n\n# 1. Preload a dataset. The code below will read the csv that is stored at the URL's location.\n# The movies variable will be available in the user's console.\nimport pandas as pd\nmovies = pd.read_csv(\"http://s3.amazonaws.com/assets.datacamp.com/course/introduction_to_r/movies.csv\")\n\n# 2. Preload a package\nimport numpy as np\n```\n\n*** =sample_code\n```{python}\n# Get integer values for genres\n_, ints = np.unique(movies.genre, return_inverse = True)\n\n# Import matplotlib.pyplot\n\n\n# Make a scatter plot: runtime on  x-axis, rating on y-axis and set c to ints\n\n\n# Show the plot\n\n```\n\n*** =solution\n```{python}\n# Get integer values for genres\n_, ints = np.unique(movies.genre, return_inverse = True)\n\n# Import matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\n# Make a scatter plot: runtime on  x-axis, rating on y-axis and set c to ints\nplt.scatter(movies.runtime, movies.rating, c=ints)\n\n# Show the plot\nplt.show()\n```\n\n*** =sct\n```{python}\n# The sct section defines the Submission Correctness Tests (SCTs) used to\n# evaluate the student's response. All functions used here are defined in the \n# pythonwhat Python package. Documentation can also be found at github.com/datacamp/pythonwhat/wiki\n\n# Check if the student changed the np.unique() call\n# If it's not called, we know the student removed the call.\n# If it's called incorrectly, we know the student changed the call.\ntest_function(\"numpy.unique\",\n              not_called_msg = \"Don't remove the call of `np.unique` to define `ints`.\",\n              incorrect_msg = \"Don't change the call of `np.unique` to define `ints`.\")\n# Check if the student removed the ints object\ntest_object(\"ints\",\n            undefined_msg = \"Don't remove the definition of the predefined `ints` object.\",\n            incorrect_msg = \"Don't change the definition of the predefined `ints` object.\")\n\n# Check if the student imported matplotlib.pyplot like the solution\n# Let automatic feedback message generation handle the feedback messages\ntest_import(\"matplotlib.pyplot\", same_as = True)\n\n# Check whether the student used the scatter() function correctly\n# If it's used, but incorrectly, tell them to check the instructions again\ntest_function(\"matplotlib.pyplot.scatter\",\n              incorrect_msg = \"You didn't use `plt.scatter()` correctly, have another look at the instructions.\")\n\n# Check if the student called the show() function\n# Let automatic feedback message generation handle all feedback messages\ntest_function(\"matplotlib.pyplot.show\")\n\nsuccess_msg(\"Great work!\")\n```",
			"file": "chapter6.md",
			"file_size": 7859,
			"file_write_time": 131091859011149763,
			"settings":
			{
				"buffer_size": 7680,
				"line_ending": "Windows"
			}
		},
		{
			"file": "chapter5.md",
			"settings":
			{
				"buffer_size": 7595,
				"line_ending": "Windows"
			}
		},
		{
			"file": "chapter4.md",
			"settings":
			{
				"buffer_size": 7615,
				"line_ending": "Windows"
			}
		},
		{
			"file": "chapter3.md",
			"settings":
			{
				"buffer_size": 7583,
				"line_ending": "Windows"
			}
		},
		{
			"file": "course.yml",
			"settings":
			{
				"buffer_size": 608,
				"line_ending": "Windows"
			}
		},
		{
			"file": "chapter1.md",
			"settings":
			{
				"buffer_size": 6190,
				"line_ending": "Windows"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 1933,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "List of possible questions:\n\n1. Where can we host slides? Amazon only or could this be Slideshare or Dropbox as well?",
			"settings":
			{
				"buffer_size": 117,
				"line_ending": "Windows",
				"name": "List of possible questions:"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "packa",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			]
		],
		"width": 512.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/lenovo/python_intro_hackathon"
	],
	"file_history":
	[
		"/C/Users/lenovo/python_intro_hackathon/chapter1.md",
		"/C/Users/lenovo/Downloads/DYD_SEC.py",
		"/C/Users/lenovo/Downloads/sub4/sub4/prepData.py",
		"/C/Users/lenovo/Downloads/sub4/sub4/finalModel.py",
		"/E/Kunal/GitHub/frontend-nanodegree-resume/Log in",
		"/E/Kunal/GitHub/javascript_experiments/test.html",
		"/E/Kunal/GitHub/frontend-nanodegree-resume/index.html",
		"/E/Kunal/GitHub/frontend-nanodegree-resume/js/resumeBuilder.js",
		"/E/Kunal/GitHub/frontend-nanodegree-resume/js/helper.js",
		"/E/Kunal/GitHub/frontend-nanodegree-resume/js/jQuery.js",
		"/E/Kunal/linux/vagrant_machine/python_code/database_setup.py",
		"/E/Kunal/linux/vagrant_machine/python_code/lotsofmenus2.py",
		"/E/Kunal/linux/vagrant_machine/python_code/fresh_tomatoes.py",
		"/E/Kunal/linux/vagrant_machine/python_code/lotsofmenus.py"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\";"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "chapter2.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7648,
						"regions":
						{
						},
						"selection":
						[
							[
								218,
								218
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "chapter7.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7562,
						"regions":
						{
						},
						"selection":
						[
							[
								132,
								132
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "chapter6.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7680,
						"regions":
						{
						},
						"selection":
						[
							[
								251,
								251
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "chapter5.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7595,
						"regions":
						{
						},
						"selection":
						[
							[
								165,
								165
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "chapter4.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7615,
						"regions":
						{
						},
						"selection":
						[
							[
								186,
								186
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "chapter3.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7583,
						"regions":
						{
						},
						"selection":
						[
							[
								7321,
								7321
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2555.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "course.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 608,
						"regions":
						{
						},
						"selection":
						[
							[
								101,
								101
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "chapter1.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6190,
						"regions":
						{
						},
						"selection":
						[
							[
								5584,
								5584
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2981.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1933,
						"regions":
						{
						},
						"selection":
						[
							[
								1933,
								1933
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 302.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 117,
						"regions":
						{
						},
						"selection":
						[
							[
								117,
								117
							]
						],
						"settings":
						{
							"auto_name": "List of possible questions:",
							"default_dir": "C:\\Users\\lenovo\\python_intro_hackathon",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Python_intro_hackathon.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
